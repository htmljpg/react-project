import React, { useEffect, useState, useContext } from 'react';
import { useParams, Navigate } from 'react-router-dom';

import ArticleForm from 'components/articleForm';
import useFetch from 'hooks/useFetch';
import { CurrentUserContext } from 'contexts/currentUser';

const EditArticle = () => {
    const { slug } = useParams();
    const apiUrl = `/articles/${slug}`;
    const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl);
    const [{response: updateArticleResponse, error: updateArticleError}, doUpdateArticle] = useFetch(apiUrl);
    const [initialValues, setInitialValues] = useState(null);
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false);
    const [currentUserState,] = useContext(CurrentUserContext);

    const handleSubmit = article => {
        console.log('handleSubmit', article);
        doUpdateArticle({
            method: 'put',
            data: {
                article
            }
        });
    }

    useEffect(() => {
        doFetchArticle();
    }, [doFetchArticle]);

    useEffect(() => {
        if (!fetchArticleResponse) {
            return;
        }

        const {
            title,
            body,
            description,
            tagList
        } = fetchArticleResponse.article;
        setInitialValues({
            title,
            body,
            description,
            tagList
        });
    }, [fetchArticleResponse]);

    useEffect(() => {
        if (!updateArticleResponse) {
            return;
        }

        setIsSuccessfullSubmit(true);
    }, [updateArticleResponse]);

    if (isSuccessfullSubmit) {
        return <Navigate to={`/articles/${updateArticleResponse.article.slug}`} />
    }

    if (currentUserState.isLoggedIn === false) {
        return <Navigate to='/' />
    }

    return (
        <ArticleForm
            onSubmit={handleSubmit}
            errors={(updateArticleError && updateArticleError.errors) || {}}
            initialValues={initialValues}
        />
    );
}

export default EditArticle;