import React, { useEffect, Fragment, useContext, useState } from 'react';
import { Link, useParams, Navigate } from 'react-router-dom';

import useFetch from 'hooks/useFetch';
import Loading from 'components/loading';
import ErrorMessage from 'components/errorMessage';
import TagList from 'components/tagList';
import { CurrentUserContext } from 'contexts/currentUser';

const Article = () => {
    const { slug } = useParams();
    const apiUrl = `/articles/${slug}`;
    const [
        {
            response: fetchArticleResponse,
            isLoading: fetchArticleIsLoading,
            error: fetchArticleError
        }, doFetch
    ] = useFetch(apiUrl);
    const [{response: deleteArticleResponse, isLoading: deleteArticleIsLoading, error: deleteArticleError}, doDeleteArticle] = useFetch(apiUrl);
    const [currentUserState] = useContext(CurrentUserContext);
    const [isSuccessfullDelete, setIsSuccessfullDelete] = useState(false);

    const isAuthor = () => {
        if (!fetchArticleResponse || !currentUserState.isLoggedIn) {
            return false;
        }

        if (fetchArticleResponse.article.author.username === currentUserState.currentUser.username) {
            return true;
        }
    }

    const deleteArticle = () => {
        doDeleteArticle({
            method: 'delete'
        });

        console.log('deleteArticleResponse', deleteArticleResponse);
        console.log('deleteArticleIsLoading', deleteArticleIsLoading);
        console.log('deleteArticleError', deleteArticleError);
    }

    useEffect(() => {
        doFetch();
    }, [doFetch]);

    useEffect(() => {
        if (!isSuccessfullDelete) {
            return;
        }

        setIsSuccessfullDelete(true);
    }, [deleteArticleResponse]);

    if (isSuccessfullDelete) {
        return <Navigate to='/' />
    }

    return (
        <div className='article-page'>
            <div className='banner'>
                <div className='container'>
                    {fetchArticleIsLoading && <Loading />}
                    {fetchArticleError && <ErrorMessage />}
                    {!fetchArticleIsLoading && fetchArticleResponse && (
                        (() => {
                            const {
                                author: {
                                    image, username
                                } = {},
                                title,
                                slug
                            } = fetchArticleResponse.article;

                            return (
                                <Fragment>
                                    <h1>{title}</h1>
                                    <div className='article-meta'>
                                        <Link to={`/profiles/${username}`}>
                                            <img src={image} alt={username} />
                                        </Link>
                                        <div className='info'>
                                            <Link to={`/profiles/${username}`} className='author'>{username}</Link>
                                        </div>
                                        {isAuthor() && (
                                            <span>
                                                <Link className='btn btn-outline-secondary btn-sm' to={`/articles/${slug}/edit`}>
                                                    <i className='ion-edit'></i>
                                                    Edit article
                                                </Link>
                                                <button className='btn btn-outline-danger btn-sm' onClick={deleteArticle}>
                                                    <i className='ion-trash-a'></i>
                                                    Delete article
                                                </button>
                                            </span>
                                        )}
                                    </div>
                                </Fragment>
                            );
                        })()
                    )}
                </div>
            </div>
            <div className='container page'>
                {fetchArticleIsLoading && <Loading />}
                {fetchArticleError && <ErrorMessage />}
                {!fetchArticleIsLoading && fetchArticleResponse && (
                    (() => {
                        const {
                            body,
                            tagList = [],
                        } = fetchArticleResponse.article;

                        return (
                            <div className='row article-content'>
                                <div className='col-xs-12'>
                                    <div>
                                        <p>{body}</p>
                                    </div>
                                    <TagList tags={tagList} />
                                </div>
                            </div>
                        );
                    })()
                )}
            </div>
        </div>
    );

    
}

export default Article;